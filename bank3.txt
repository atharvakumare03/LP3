# Install the required libraries with specific versions
!pip install pandas==1.5.3 numpy==1.21.6 scikit-learn==1.0.2 tensorflow==2.9.1 matplotlib==3.5.2 seaborn==0.11.2

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Step 1: Load the dataset
data = pd.read_csv('/content/Churn_Modelling.csv')

# Step 2: Distinguish the feature and target set
X = data.drop(columns=['RowNumber', 'CustomerId', 'Surname', 'Exited'])
y = data['Exited']

# One-hot encoding for categorical features
X = pd.get_dummies(X, columns=['Geography', 'Gender'], drop_first=True)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Normalize the train and test data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 4: Initialize and build the model
model = Sequential([
    Dense(64, input_shape=(X_train_scaled.shape[1],), activation='relu'),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2)

# Step 5: Print the accuracy score and confusion matrix
y_pred = (model.predict(X_test_scaled) > 0.5).astype("int32")
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:')
print(conf_matrix)

# # Example new customer data
# new_customer = {
#     'CreditScore': 600,
#     'Geography': 'Spain',
#     'Gender': 'Female',
#     'Age': 40,
#     'Tenure': 3,
#     'Balance': 60000,
#     'NumOfProducts': 2,
#     'HasCrCard': 1,
#     'IsActiveMember': 1,
#     'EstimatedSalary': 50000
# }

# # Convert to DataFrame
# new_customer_df = pd.DataFrame([new_customer])

# # One-hot encoding for categorical features
# new_customer_df = pd.get_dummies(new_customer_df, columns=['Geography', 'Gender'], drop_first=True)

# # Make sure the DataFrame has all columns in the same order as the training data
# # This step might need adjustments based on the columns in your training data
# missing_cols = set(X_train.columns) - set(new_customer_df.columns)
# for col in missing_cols:
#     new_customer_df[col] = 0
# new_customer_df = new_customer_df[X_train.columns]

# # Normalize the new customer data
# new_customer_scaled = scaler.transform(new_customer_df)

# # Predict if the new customer will exit
# prediction = model.predict(new_customer_scaled)
# prediction = (prediction > 0.5).astype("int32")

# # Output the prediction
# if prediction == 1:
#     print("The customer is likely to leave in the next 6 months.")
# else:
#     print("The customer is likely to stay in the next 6 months.")
